{"ast":null,"code":"var _jsxFileName = \"/Users/sylvainvendeol/Documents/GitHub/escrow-generator/app/src/pages/History/history.js\",\n  _s = $RefreshSig$();\nimport { ethers } from 'ethers';\nimport { useEffect, useState } from 'react';\nimport AbiHistory from '../../artifacts/contracts/History.sol/History';\nimport AbiLocker from '../../artifacts/contracts/TokenLock.sol/TokenLock';\nimport AbiVester from '../../artifacts/contracts/Vested.sol/Vesting';\nimport AbiEscrow from '../../artifacts/contracts/Escrow.sol/Escrow';\nimport Escrow from '../SimpleEscrow/escrowHistory';\nimport Timelocker from '../Locker/lockerHistory';\nimport Vester from '../Vesting/vestingHistory';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst historyContractAddress = '0xD81267Ce7922fbaAd6D9ac4422B312D4516586FD';\nexport async function approve(escrowContract, signer) {\n  const approveTxn = await escrowContract.connect(signer).approve();\n  await approveTxn.wait();\n}\nexport async function cancel(escrowContract, signer) {\n  const approveTxn = await escrowContract.connect(signer).cancel();\n  await approveTxn.wait();\n}\nexport async function claim(lockerContract, signer) {\n  const approveTxn = await lockerContract.connect(signer).claim();\n  await approveTxn.wait();\n}\nexport async function vestingClaim(vestingContract, signer) {\n  const approveTxn = await vestingContract.connect(signer).claim();\n  await approveTxn.wait();\n}\nfunction History() {\n  _s();\n  const [account, setAccount] = useState();\n  const [contractHistory, setEsContractHistory] = useState([]);\n  const [arbiterHistory, setEsArbiterHistory] = useState([]);\n  const [beneficiaryHistory, setEsBeneficiaryHistory] = useState([]);\n  const [lockerDeployer, setLockerDeployer] = useState([]);\n  const [lockerBeneficiary, setLockerBeneficiary] = useState([]);\n  const [vesterDeployer, setVesterDeployer] = useState([]);\n  const [vesterBeneficiary, setVesterBeneficiary] = useState([]);\n  useEffect(() => {\n    async function getAccounts() {\n      const accounts = await provider.send('eth_requestAccounts', []);\n      const signer = provider.getSigner();\n\n      //Create an instance of the History contract\n      const historyContract = new ethers.Contract(historyContractAddress, AbiHistory.abi, signer);\n\n      //============================= HISTORY OF SIMPLE ESCROW CONTRACT =============================================\n\n      const escrowAsDeployer = await historyContract.viewEscrow(accounts[0]);\n      const escrowAsArbiter = await historyContract.viewAsArbiter(accounts[0]);\n      const escrowAsBeneficiary = await historyContract.viewAsBeneficiary(accounts[0]);\n\n      //first extract required items from asDeployer into an array of an array, then transform the sub-array into an object\n      //and finally add he finctions handleApprove and handleCancle into the object.  Final result is an array of objects\n      const historyAsDeployer = escrowAsDeployer.map(item => [item.contractAddress, item.arbiter, item.beneficiary, ethers.utils.formatEther(item.value.toString()), item.typeOf]).map(_ref => {\n        let [address, arbiter, beneficiary, value, typeOf] = _ref;\n        return {\n          address,\n          arbiter,\n          beneficiary,\n          value,\n          typeOf\n        };\n      }).map(item => ({\n        ...item,\n        role: \"Deployer\"\n      }));\n      const historyAsArbiter = escrowAsArbiter.map(item => [item.contractAddress, item.arbiter, item.beneficiary, ethers.utils.formatEther(item.value.toString()), item.typeOf]).map(_ref2 => {\n        let [address, arbiter, beneficiary, value, typeOf] = _ref2;\n        return {\n          address,\n          arbiter,\n          beneficiary,\n          value,\n          typeOf\n        };\n      }).map(item => ({\n        ...item,\n        role: \"Arbiter\",\n        handleApprove: async function () {\n          const escrowContract = new ethers.Contract(item.address, AbiEscrow.abi, signer);\n          escrowContract.on('Approved', () => {\n            document.getElementById(escrowContract.address).className = 'complete';\n            document.getElementById(escrowContract.address).innerText = \"✓ It's been approved!\";\n          });\n          await approve(escrowContract, signer);\n        },\n        handleCancel: async function () {\n          const escrowContract = new ethers.Contract(item.address, AbiEscrow.abi, signer);\n          escrowContract.on('Cancelled', () => {\n            document.getElementById(escrowContract.address).className = 'cancelled';\n            document.getElementById(escrowContract.address).innerText = \"X It's been cancelled!\";\n          });\n          await cancel(escrowContract, signer);\n        }\n      }));\n      const historyAsBeneficiary = escrowAsBeneficiary.map(item => [item.contractAddress, item.arbiter, item.beneficiary, ethers.utils.formatEther(item.value.toString()), item.typeOf]).map(_ref3 => {\n        let [address, arbiter, beneficiary, value, typeOf] = _ref3;\n        return {\n          address,\n          arbiter,\n          beneficiary,\n          value,\n          typeOf\n        };\n      }).map(item => ({\n        ...item,\n        role: \"Beneficiary\"\n      }));\n\n      //================================== HISTORY OF LOCKER CONTRACT ===================================================================\n\n      const lockerAsDeployer = await historyContract.viewLockerAsDeployer(accounts[0]);\n      const lockerAsBeneficiary = await historyContract.viewLockerAsBeneficiary(accounts[0]);\n      const historyLockerAsDeployer = lockerAsDeployer.map(item => [item.contractAddress, item.beneficiary, ethers.utils.formatEther(item.value.toString()), item.typeOf, parseInt(item.lockPeriod).toString()]).map(_ref4 => {\n        let [address, beneficiary, value, typeOf, lockPeriod] = _ref4;\n        return {\n          address,\n          beneficiary,\n          value,\n          typeOf,\n          lockPeriod\n        };\n      }).map(item => ({\n        ...item,\n        role: \"Deployer\"\n      }));\n      const historyLockerAsBeneficiary = lockerAsBeneficiary.map(item => [item.contractAddress, item.beneficiary, ethers.utils.formatEther(item.value.toString()), item.typeOf, item.lockPeriod.toNumber()]).map(_ref5 => {\n        let [address, beneficiary, value, typeOf, lockPeriod] = _ref5;\n        return {\n          address,\n          beneficiary,\n          value,\n          typeOf,\n          lockPeriod\n        };\n      }).map(item => ({\n        ...item,\n        role: \"Beneficiary\",\n        handleClaim: async function () {\n          const lockerContract = new ethers.Contract(item.address, AbiLocker.abi, signer);\n          lockerContract.on('Claimed', () => {\n            document.getElementById(lockerContract.address).className = 'claimed';\n            document.getElementById(lockerContract.address).innerText = \"✓ It's been claimed!\";\n          });\n          await claim(lockerContract, signer);\n        }\n      }));\n\n      //================================== HISTORY OF VESTING CONTRACT ===================================================================\n\n      const vesterAsDeployer = await historyContract.viewVesterAsDeployer(accounts[0]);\n      const vesterAsBeneficiary = await historyContract.viewVesterAsBeneficiary(accounts[0]);\n      const historyVesterAsDeployer = vesterAsDeployer.map(item => [item.contractAddress, item.beneficiary, ethers.utils.formatEther(item.value.toString()), item.typeOf, parseInt(item.numberOfClaims).toString()]).map(_ref6 => {\n        let [address, beneficiary, value, typeOf, numberOfClaims] = _ref6;\n        return {\n          address,\n          beneficiary,\n          value,\n          typeOf,\n          numberOfClaims\n        };\n      }).map(item => ({\n        ...item,\n        role: \"Deployer\"\n      }));\n      const historyVesterAsBeneficiary = vesterAsBeneficiary.map(item => [item.contractAddress, item.beneficiary, ethers.utils.formatEther(item.value.toString()), item.typeOf, item.numberOfClaims.toNumber()]).map(_ref7 => {\n        let [address, beneficiary, value, typeOf, numberOfClaims] = _ref7;\n        return {\n          address,\n          beneficiary,\n          value,\n          typeOf,\n          numberOfClaims\n        };\n      }).map(item => ({\n        ...item,\n        role: \"Beneficiary\",\n        handleClaim: async function () {\n          const vesterContract = new ethers.Contract(item.address, AbiVester.abi, signer);\n          vesterContract.on('Claimed', () => {\n            document.getElementById(vesterContract.address).className = 'claimed';\n            document.getElementById(vesterContract.address).innerText = \"✓ It's been claimed!\";\n          });\n          await vestingClaim(vesterContract, signer);\n        }\n      }));\n      setAccount(accounts[0]);\n      setEsContractHistory(historyAsDeployer);\n      setEsArbiterHistory(historyAsArbiter);\n      setEsBeneficiaryHistory(historyAsBeneficiary);\n      setLockerDeployer(historyLockerAsDeployer);\n      setLockerBeneficiary(historyLockerAsBeneficiary);\n      setVesterDeployer(historyVesterAsDeployer);\n      setVesterBeneficiary(historyVesterAsBeneficiary);\n    }\n    getAccounts();\n  }, [account]);\n  if (contractHistory.length == 0 && arbiterHistory.length == 0 && beneficiaryHistory.length == 0 && lockerDeployer.length == 0 && lockerBeneficiary == 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" History \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \" Nothing to display \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" History \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"existing-contracts\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"container\",\n          children: [contractHistory.map(contract => {\n            return /*#__PURE__*/_jsxDEV(Escrow, {\n              ...contract\n            }, contract.address, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 36\n            }, this);\n          }), arbiterHistory.map(contract => {\n            return /*#__PURE__*/_jsxDEV(Escrow, {\n              ...contract\n            }, contract.address, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 36\n            }, this);\n          }), beneficiaryHistory.map(contract => {\n            return /*#__PURE__*/_jsxDEV(Escrow, {\n              ...contract\n            }, contract.address, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 36\n            }, this);\n          }), lockerDeployer.map(contract => {\n            return /*#__PURE__*/_jsxDEV(Timelocker, {\n              ...contract\n            }, contract.address, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 36\n            }, this);\n          }), lockerBeneficiary.map(contract => {\n            return /*#__PURE__*/_jsxDEV(Timelocker, {\n              ...contract\n            }, contract.address, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 36\n            }, this);\n          }), vesterDeployer.map(contract => {\n            return /*#__PURE__*/_jsxDEV(Vester, {\n              ...contract\n            }, contract.address, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 36\n            }, this);\n          }), vesterBeneficiary.map(contract => {\n            return /*#__PURE__*/_jsxDEV(Vester, {\n              ...contract\n            }, contract.address, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 36\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this);\n  }\n}\n_s(History, \"xLH1Ciqy1c3VcjcXzJgqUi83ZTU=\");\n_c = History;\nexport default History;\nvar _c;\n$RefreshReg$(_c, \"History\");","map":{"version":3,"names":["ethers","useEffect","useState","AbiHistory","AbiLocker","AbiVester","AbiEscrow","Escrow","Timelocker","Vester","provider","providers","Web3Provider","window","ethereum","historyContractAddress","approve","escrowContract","signer","approveTxn","connect","wait","cancel","claim","lockerContract","vestingClaim","vestingContract","History","account","setAccount","contractHistory","setEsContractHistory","arbiterHistory","setEsArbiterHistory","beneficiaryHistory","setEsBeneficiaryHistory","lockerDeployer","setLockerDeployer","lockerBeneficiary","setLockerBeneficiary","vesterDeployer","setVesterDeployer","vesterBeneficiary","setVesterBeneficiary","getAccounts","accounts","send","getSigner","historyContract","Contract","abi","escrowAsDeployer","viewEscrow","escrowAsArbiter","viewAsArbiter","escrowAsBeneficiary","viewAsBeneficiary","historyAsDeployer","map","item","contractAddress","arbiter","beneficiary","utils","formatEther","value","toString","typeOf","address","role","historyAsArbiter","handleApprove","on","document","getElementById","className","innerText","handleCancel","historyAsBeneficiary","lockerAsDeployer","viewLockerAsDeployer","lockerAsBeneficiary","viewLockerAsBeneficiary","historyLockerAsDeployer","parseInt","lockPeriod","historyLockerAsBeneficiary","toNumber","handleClaim","vesterAsDeployer","viewVesterAsDeployer","vesterAsBeneficiary","viewVesterAsBeneficiary","historyVesterAsDeployer","numberOfClaims","historyVesterAsBeneficiary","vesterContract","length","contract"],"sources":["/Users/sylvainvendeol/Documents/GitHub/escrow-generator/app/src/pages/History/history.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { useEffect, useState } from 'react';\nimport AbiHistory from '../../artifacts/contracts/History.sol/History';\nimport AbiLocker from '../../artifacts/contracts/TokenLock.sol/TokenLock';\nimport AbiVester from '../../artifacts/contracts/Vested.sol/Vesting';\nimport AbiEscrow from '../../artifacts/contracts/Escrow.sol/Escrow';\n\nimport Escrow from '../SimpleEscrow/escrowHistory';\nimport Timelocker from '../Locker/lockerHistory';\nimport Vester from '../Vesting/vestingHistory';\n\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst historyContractAddress = '0xD81267Ce7922fbaAd6D9ac4422B312D4516586FD';\n\nexport async function approve(escrowContract, signer) {\n    const approveTxn = await escrowContract.connect(signer).approve();\n    await approveTxn.wait();\n  }\nexport async function cancel(escrowContract, signer) {\n      const approveTxn = await escrowContract.connect(signer).cancel();\n      await approveTxn.wait();\n  }\nexport async function claim(lockerContract, signer) {\n    const approveTxn = await lockerContract.connect(signer).claim();\n    await approveTxn.wait();\n  }\nexport async function vestingClaim(vestingContract, signer) {\n    const approveTxn = await vestingContract.connect(signer).claim();\n    await approveTxn.wait();\n  }\n\nfunction History() {\n    const [account, setAccount] = useState();\n\n    const [contractHistory, setEsContractHistory] = useState([]);\n    const [arbiterHistory, setEsArbiterHistory] = useState([]);\n    const [beneficiaryHistory, setEsBeneficiaryHistory] = useState([]);\n\n    const [lockerDeployer, setLockerDeployer] = useState([]);\n    const [lockerBeneficiary, setLockerBeneficiary] = useState([]);\n\n    const [vesterDeployer, setVesterDeployer] = useState([]);\n    const [vesterBeneficiary, setVesterBeneficiary] = useState([]);\n\n    useEffect(() => {\n        async function getAccounts() {\n            const accounts = await provider.send('eth_requestAccounts', []);\n            const signer = provider.getSigner();\n\n            //Create an instance of the History contract\n            const historyContract = new ethers.Contract(historyContractAddress, AbiHistory.abi, signer);\n\n //============================= HISTORY OF SIMPLE ESCROW CONTRACT =============================================\n            \n            const escrowAsDeployer = await historyContract.viewEscrow(accounts[0]);\n\n            const escrowAsArbiter = await historyContract.viewAsArbiter(accounts[0]);\n\n            const escrowAsBeneficiary = await historyContract.viewAsBeneficiary(accounts[0]);\n\n            //first extract required items from asDeployer into an array of an array, then transform the sub-array into an object\n            //and finally add he finctions handleApprove and handleCancle into the object.  Final result is an array of objects\n            const historyAsDeployer = escrowAsDeployer.map(item => [\n                                                    item.contractAddress,\n                                                    item.arbiter,\n                                                    item.beneficiary,\n                                                    ethers.utils.formatEther(item.value.toString()),\n                                                    item.typeOf\n                                                  ])\n                                          .map(([address, arbiter, beneficiary, value, typeOf]) => ({ address, arbiter, beneficiary, value, typeOf }))\n                                          .map(item => ({...item,\n                                                        role: \"Deployer\",\n                                                        }));\n            const historyAsArbiter = escrowAsArbiter.map(item => [\n                                                  item.contractAddress,\n                                                  item.arbiter,\n                                                  item.beneficiary,\n                                                  ethers.utils.formatEther(item.value.toString()),\n                                                  item.typeOf\n                                                ])\n                                              .map(([address, arbiter, beneficiary, value, typeOf]) => ({ address, arbiter, beneficiary, value, typeOf }))\n                                              .map(item => ({...item,\n                                                            role: \"Arbiter\", \n                                                            handleApprove: async function() {\n                                                                              const escrowContract = new ethers.Contract(item.address, AbiEscrow.abi,signer);\n                                                                              escrowContract.on('Approved', () => {\n                                                                                document.getElementById(escrowContract.address).className = 'complete';\n                                                                                document.getElementById(escrowContract.address).innerText = \"✓ It's been approved!\";\n                                                                              });\n                                                                              await approve(escrowContract, signer);\n                                                                          },\n                                                            handleCancel: async function() {\n                                                                              const escrowContract = new ethers.Contract(item.address, AbiEscrow.abi,signer);\n                                                                              escrowContract.on('Cancelled', () => {\n                                                                                document.getElementById(escrowContract.address).className = 'cancelled';\n                                                                                document.getElementById(escrowContract.address).innerText = \"X It's been cancelled!\";\n                                                                              });\n                                                                              await cancel(escrowContract, signer);\n                                                                          }\n                                                            }));\n            const historyAsBeneficiary = escrowAsBeneficiary.map(item => [\n                                                    item.contractAddress,\n                                                    item.arbiter,\n                                                    item.beneficiary,\n                                                    ethers.utils.formatEther(item.value.toString()),\n                                                    item.typeOf\n                                                  ])\n                                                .map(([address, arbiter, beneficiary, value, typeOf]) => ({ address, arbiter, beneficiary, value, typeOf }))\n                                                .map(item => ({...item,\n                                                              role: \"Beneficiary\",\n                                                              }));\n\n//================================== HISTORY OF LOCKER CONTRACT ===================================================================\n               \n            const lockerAsDeployer = await historyContract.viewLockerAsDeployer(accounts[0]);\n\n            const lockerAsBeneficiary = await historyContract.viewLockerAsBeneficiary(accounts[0]);\n\n            const historyLockerAsDeployer = lockerAsDeployer.map(item => [\n                                                            item.contractAddress,\n                                                            item.beneficiary,\n                                                            ethers.utils.formatEther(item.value.toString()),\n                                                            item.typeOf,\n                                                            parseInt(item.lockPeriod).toString()\n                                                          ])\n                                                      .map(([address, beneficiary, value, typeOf, lockPeriod]) => ({ address, beneficiary, value, typeOf, lockPeriod }))\n                                                      .map(item => ({...item,\n                                                                    role: \"Deployer\",\n                                                                    }));\n\n            const historyLockerAsBeneficiary = lockerAsBeneficiary.map(item => [\n                                                                        item.contractAddress,\n                                                                        item.beneficiary,\n                                                                        ethers.utils.formatEther(item.value.toString()),\n                                                                        item.typeOf,\n                                                                        item.lockPeriod.toNumber()\n                                                                      ])\n                                                                  .map(([address, beneficiary, value, typeOf, lockPeriod ]) => ({ address, beneficiary, value, typeOf, lockPeriod }))\n                                                                  .map(item => ({...item,\n                                                                                role: \"Beneficiary\",\n                                                                                handleClaim: async function() {\n                                                                                                const lockerContract = new ethers.Contract(item.address, AbiLocker.abi,signer);\n                                                                                                lockerContract.on('Claimed', () => {\n                                                                                                  document.getElementById(lockerContract.address).className = 'claimed';\n                                                                                                  document.getElementById(lockerContract.address).innerText = \"✓ It's been claimed!\";\n                                                                                                });\n                                                                                                await claim(lockerContract, signer);\n                                                                                            }\n                                                                                }));\n\n//================================== HISTORY OF VESTING CONTRACT ===================================================================\n\n            const vesterAsDeployer = await historyContract.viewVesterAsDeployer(accounts[0]);\n\n            const vesterAsBeneficiary = await historyContract.viewVesterAsBeneficiary(accounts[0]);\n\n            const historyVesterAsDeployer = vesterAsDeployer.map(item => [\n                                                                  item.contractAddress,\n                                                                  item.beneficiary,\n                                                                  ethers.utils.formatEther(item.value.toString()),\n                                                                  item.typeOf,\n                                                                  parseInt(item.numberOfClaims).toString()\n                                                                ])\n                                                            .map(([address, beneficiary, value, typeOf, numberOfClaims]) => ({ address, beneficiary, value, typeOf, numberOfClaims }))\n                                                            .map(item => ({...item,\n                                                                          role: \"Deployer\",\n                                                                          }));\n\n            const historyVesterAsBeneficiary = vesterAsBeneficiary.map(item => [\n                                                                        item.contractAddress,\n                                                                        item.beneficiary,\n                                                                        ethers.utils.formatEther(item.value.toString()),\n                                                                        item.typeOf,\n                                                                        item.numberOfClaims.toNumber()\n                                                                      ])\n                                                                  .map(([address, beneficiary, value, typeOf, numberOfClaims ]) => ({ address, beneficiary, value, typeOf, numberOfClaims }))\n                                                                  .map(item => ({...item,\n                                                                                role: \"Beneficiary\",\n                                                                                handleClaim: async function() {\n                                                                                                const vesterContract = new ethers.Contract(item.address, AbiVester.abi,signer);\n                                                                                                vesterContract.on('Claimed', () => {\n                                                                                                  document.getElementById(vesterContract.address).className = 'claimed';\n                                                                                                  document.getElementById(vesterContract.address).innerText = \"✓ It's been claimed!\";\n                                                                                                });\n                                                                                                await vestingClaim(vesterContract, signer);\n                                                                                            }\n                                                                                }));\n\n            setAccount(accounts[0]);\n\n            setEsContractHistory(historyAsDeployer);\n            setEsArbiterHistory(historyAsArbiter);\n            setEsBeneficiaryHistory(historyAsBeneficiary)\n\n            setLockerDeployer(historyLockerAsDeployer);\n            setLockerBeneficiary(historyLockerAsBeneficiary);\n\n            setVesterDeployer(historyVesterAsDeployer);\n            setVesterBeneficiary(historyVesterAsBeneficiary);\n        }\n    \n        getAccounts();\n        }, [account]);\n\n     if(contractHistory.length == 0 && arbiterHistory.length ==0 && beneficiaryHistory.length == 0\n          && lockerDeployer.length == 0 && lockerBeneficiary == 0) {\n        return(\n            <div className='page'>\n                <h1> History </h1>\n                <h2> Nothing to display </h2>\n            </div>\n        )\n      } else{\n        return(\n            <div className='page'>\n                <h1> History </h1>\n                <div className=\"existing-contracts\">\n                    <div id=\"container\">\n                        {contractHistory.map((contract) => {\n                            return <Escrow key={contract.address} {...contract} />\n                        })}\n                        {arbiterHistory.map((contract) => {\n                            return <Escrow key={contract.address} {...contract} />\n                        })}\n                        {beneficiaryHistory.map((contract) => {\n                            return <Escrow key={contract.address} {...contract} />\n                        })}\n                        {lockerDeployer.map((contract) => {\n                            return <Timelocker key={contract.address} {...contract} />\n                        })}\n                        {lockerBeneficiary.map((contract) => {\n                            return <Timelocker key={contract.address} {...contract} />\n                        })}\n                        {vesterDeployer.map((contract) => {\n                            return <Vester key={contract.address} {...contract} />\n                        })}\n                        {vesterBeneficiary.map((contract) => {\n                            return <Vester key={contract.address} {...contract} />\n                        })}\n                        \n                    </div>\n                </div>\n            </div>\n        )\n      }\n}\n\nexport default History;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}